# This is a basic workflow to help you get started with Test Actions

name: CICD Pipeline

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"

  publish-coverage-report:
    uses: ./.github/workflows/build-validation.yml
    with:
      deploy_env: 'reports_site'
      image_name: inputvariablename
     
  run-unit-tests:
    runs-on: ubuntu-latest
    needs: build
    container:
      image: mcr.microsoft.com/dotnet/sdk:6.0
    timeout-minutes: 30  

    steps:
    - name: Checkout application code
      uses: actions/checkout@v3
  
  build:
    runs-on: ubuntu-latest

    steps:
      - run: echo application build successfull
      - run: echo "${GITHUB_REF}"
      - run: echo "${GITHUB_HEAD_REF}"
          
  deploy-to-dev:
    runs-on: ubuntu-latest
    needs: [build]
    environment: dev
    steps:
      - run: echo deployed metrics site to dev environment
      - run: echo deployed tableau sync service to dev environment
      - run: echo deployed double click extract service to dev environment
      - run: echo deployed extract control service to dev environment
          
  deploy-to-stage:
    runs-on: ubuntu-latest
    needs: [deploy-to-dev]
    environment: staging
    steps:
      - run: echo deployed metrics site to staging environment
      - run: echo deployed tableau sync service to staging environment
      - run: echo deployed double click extract service to staging environment
      - run: echo deployed extract control service to staging environment
          
  deploy-2-to-stage:
    runs-on: ubuntu-latest
    needs: [deploy-to-dev]
    environment: staging
    steps:
      - run: echo deployed metrics site to staging environment
      - run: echo deployed tableau sync service to staging environment
      - run: echo deployed double click extract service to staging environment
      - run: echo deployed extract control service to staging environment
          
  deploy-to-prod:
    runs-on: ubuntu-latest
    needs: [deploy-to-stage]
    environment: production
    steps:
      - run: echo deployed metrics site to prod environment
      - run: echo deployed tableau sync service to prod environment
      - run: echo deployed double click extract service to prod environment
      - run: echo deployed extract control service to prod environment
